import gradio as gr
import requests
import os

# Set your Hugging Face API token
HUGGING_FACE_TOKEN = os.getenv("HUGGING_FACE_TOKEN", "")
MODEL_NAME = "gpt2"  # Switch to GPT-2 model

API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"
HEADERS = {"Authorization": f"Bearer {HUGGING_FACE_TOKEN}"}

# Function to send a chat message to the Hugging Face API
def household_chat(history, message):
    if history is None:
        history = []

    # GPT-2 models usually work with a simple text string, so just concatenate the messages
    chat_input = message  # GPT-2 doesn't typically need special roles

    payload = {
        "inputs": chat_input,
        "parameters": {"max_length": 150, "temperature": 0.7},
    }

    # Make the API call
    try:
        response = requests.post(API_URL, headers=HEADERS, json=payload)
        response.raise_for_status()  # Raises HTTPError if the response code is not 200
        response_data = response.json()

        # Get the generated response from the model
        bot_reply = response_data[0].get("generated_text", "‚ö†Ô∏è Unexpected response format.")
    except requests.exceptions.RequestException as e:
        bot_reply = f"‚ö†Ô∏è Error occurred: {str(e)}"
    
    # Update the history
    history.append({"role": "user", "content": message})
    history.append({"role": "assistant", "content": bot_reply})

    return history, bot_reply

# Chat Interface
def chat_page():
    with gr.Blocks() as chat_interface:
        gr.Markdown("## üí¨ Chat with GPT-2 Assistant")

        # Create a chat history component
        chat_history = gr.Chatbot(label="Chat", type="messages")

        # Textbox for the user input and send button
        message_input = gr.Textbox(label="Ask a question", placeholder="Type your message here...")

        send_button = gr.Button("Send")
        end_chat_button = gr.Button("End Chat")

        # Manage the conversation state (empty list at the start)
        history_state = gr.State([])

        # When the send button is clicked, update the chat history
        send_button.click(household_chat, inputs=[history_state, message_input], outputs=[chat_history, message_input])

        # Optional end chat functionality (clear chat history)
        end_chat_button.click(lambda: gr.update(selected="Goodbye"), inputs=None, outputs=None)

    return chat_interface

# Launch Gradio app for Hugging Face Spaces or localhost
app = chat_page()
app.launch(server_name="0.0.0.0", server_port=int(os.getenv("PORT", 7860)))
